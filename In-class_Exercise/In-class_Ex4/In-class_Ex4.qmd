---
title: "In-class_Ex4"
author: "Widya Tantiya Yutika"
date: "09 December 2023"
date-modified: "last-modified"
format: html
execute: 
  echo: true
  eval: true
  warning: false
editor: visual
---

## Overview

In this in-class exercise, you will gain hands-on experience on the following tasks:

-   performing geocoding using data downloaded from data.gov.sg

-   calibrating Geographically Weighted Poisson Regression

## Getting Started

```{r}
pacman::p_load(tidyverse, sf, httr, tmap)
```

Notes: httr allows us to work with html (to communicate with web server.

## Geocoding using SLA API

Address geocoding, or simply geocoding, is the process of taking a aspatial description of a location, such as an address or postcode, and returning geographic coordinates, frequently latitude/longitude pair, to identify a location on the Earth's surface.

Singapore Land Authority (SLA) supports online geocoding service called [OneMap API](https://www.onemap.gov.sg/apidocs/).

```{r}
#| eval: false
url <- "https://www.onemap.gov.sg/api/common/elastic/search"

csv <- read_csv("data/aspatial/Generalinformationofschools.csv")
postcodes <- csv$'postal_code'

found <- data.frame()
not_found <- data.frame()

for (postcode in postcodes){
  query <- list('searchVal'=postcode,'returnGeom'='Y','getAddrDetails'='Y','pageNum'='1')
  res<-GET(url, query=query)
  
  if((content(res)$found)!=0){
    found <-rbind(found, data.frame(content(res))[4:13])
  } else{
    not_found = data.frame(postcode)
  }
}
```

Notes:

#\| eval: false -\> run 1 time only

#\| echo: false -\> the code wont be shown on html page

#\| message: false -\> the message will not come up

```{r}
#| eval: false
merged = merge(csv, found, by.x='postal_code', by.y='results.POSTAL', all=TRUE)
write.csv (merged, file='data/aspatial/schools.csv')
write.csv (not_found, file ='data/aspatial/not_found.csv')
```

## Converting an aspatial dat ainto a simple feature tibble data.frame

### Importing and tidying schools data

```{r}
schools <- read_csv("data/aspatial/schools.csv")%>%
  rename(latitude='results.LATITUDE', longitude='results.LONGITUDE')%>%
  select(postal_code, school_name, latitude,longitude)


```

### Converting an aspatial data into sf tibble data.frame

```{r}
schools_sf <- st_as_sf(schools, 
                       coords=c('longitude', 'latitude'),
                       crs=4326) %>%
  st_transform(crs=3414)
```

### Plotting a point simple feature layer
