---
title: "Hands-on_Ex8: Spatial Weights and Applications"
editor: visual
date: "18 November 2023"
date-modified: "last-modified"
---

## Overview

In this hands-on exercise, I will learn how to compute spatial weights using R including:

-   import geospatial data using appropriate function(s) of **sf** package,

-   import csv file using appropriate function of **readr** package,

-   perform relational join using appropriate join function of **dplyr** package,

-   compute spatial weights using appropriate functions of **spdep** package, and

-   calculate spatially lagged variables using appropriate functions of **spdep** package.

## The Study Area and Data

Two data sets will be used in this hands-on exercise, they are:

-   Hunan county boundary layer. This is a geospatial data set in ESRI shapefile format.

-   Hunan_2012.csv: This csv file contains selected Hunan's local development indicators in 2012.

### **Getting Started**

Before we get started, we need to ensure that **spdep**, **sf**, **tmap, knitr** and **tidyverse** packages of R are currently installed in your R.

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse, knitr)
```

## **Getting the Data Into R Environment**

In this section, you will learn how to bring a geospatial data and its associated attribute table into R environment. The geospatial data is in ESRI shapefile format and the attribute table is in csv fomat.

### **Import shapefile into r environment**

The code chunk below uses [*st_read()*](https://r-spatial.github.io/sf/reference/st_read.html) of **sf** package to import Hunan shapefile into R. The imported shapefile will be **simple features** Object of **sf**.

```{r}
#hunan <- st_read(dsn = "data/geospatial", layer = "Hunan")
```

### **Import csv file into r environment**

Next, we will import *Hunan_2012.csv* into R by using *read_csv()* of **readr** package. The output is R dataframe class.

```{r}
#hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

### **Performing relational join**

The code chunk below will be used to update the attribute table of *hunan*'s SpatialPolygonsDataFrame with the attribute fields of *hunan2012* dataframe. This is performed by using *left_join()* of **dplyr** package.

```{r}
#hunan <- left_join(hunan,hunan2012)%>%
#  select(1:4, 7, 15)
```

## **Visualising Regional Development Indicator**

Now, we are going to prepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using *qtm()* of **tmap** package.

```{r}
#basemap <- tm_shape(hunan) +
 # tm_polygons() +
  #tm_text("NAME_3", size=0.5)

#gdppc <- qtm(hunan, "GDPPC")
#tmap_arrange(basemap, gdppc, asp=1, ncol=2)
```

## **Computing Contiguity Spatial Weights**

n this section, you will learn how to use [*poly2nb()*](https://r-spatial.github.io/spdep/reference/poly2nb.html) of **spdep** package to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. If you look at the documentation you will see that you can pass a "queen" argument that takes TRUE or FALSE as options. If you do not specify this argument the default is set to TRUE, that is, if you don't specify queen = FALSE this function will return a list of first order neighbours using the Queen criteria.

### **Computing (QUEEN) contiguity based neighbours**

The code chunk below is used to compute Queen contiguity weight matrix.

```{r}
#wm_q <- poly2nb(hunan, queen=TRUE)
#summary(wm_q)
```

The summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one heighbours.

For each polygon in our polygon object, *wm_q* lists all neighboring polygons. For example, to see the neighbors for the first polygon in the object, type:

```{r}
#wm_q[[1]]
```
