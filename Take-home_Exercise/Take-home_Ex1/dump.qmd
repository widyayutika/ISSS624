---
title: "Untitled"
---

## Task 1: Geovisualisation and Analysis

```{r} tm_shape(mpsz) +   tm_polygons() %>%   tm_shape() +   tm_lines(lwd = "MORNING_PEAK",            style = "quantile",            scale = c(0.1, 1, 3, 5, 7, 10),            n = 6,            alpha = 0.3)}
```

```{r} tmap_mode("view")  map_honeycomb = tm_shape(odbus_weekday_6_9_data) +   tm_fill(     col = "MORNING_PEAK",     palette = "Reds",     style = "cont",     title = "Number of Trips",     id = "grid_id",     showNA = FALSE,     alpha = 0.6,     popup.vars = c("MORNING_PEAK"),     popup.format = list(       MORNING_PEAK = list(format = "f", digits = 0))   ) +   tm_borders(col = "grey40", lwd = 0.7)  map_honeycomb}
```

### Number of Trips in Origin Bus Stop

The code chunk below will be used to calculate the the number of trips in each bus stop.

```{r} total_trips_in_origin_busstop <-odbus %>%   group_by(ORIGIN_PT_CODE) %>%   summarise(TOTAL_TRIPS=sum(TOTAL_TRIPS))}
```

### Performing Relational Join

The code chunk below will be used to join the busstop SpatialPolygonsDataframe and original_destination_bus by the bus stop id (BUS_STOP_N for busstop and ORIGIN_PT_CODE for original_destination_bus). This is performed by using *left_join()* of **dplyr** package.

```{r} total_trips_in_origin_busstop <- left_join(busstop3414, total_trips_in_origin_busstop, by = c("BUS_STOP_N" = "ORIGIN_PT_CODE"))}
```

### Spatial Join with honeycomb grid

The code chunk below will be used to join the total_trips_in_origin_busstop and honeycomb grid spatially.

```{r} # Spatially join the trip data with the honeycomb grid total_trips_in_origin_busstop_honeycomb <- st_join(honeycomb_grid_sf,total_trips_in_origin_busstop)}
```

### Remove Grid Without any Bus Stop

The code chunk below will be used to remove the grid id without

```{r} # Remove rows with NA values in the 'bus_stop_N' column total_trips_in_origin_busstop_honeycomb <- total_trips_in_origin_busstop_honeycomb %>%   filter(!is.na(BUS_STOP_N))}
```

### Number of Trips per Grid

The code chunk below is used to calculate the sum of trips in each grid. Some grids consist of more than 1 bus stop and thus the number of trips will be summed.

```{r} trips_per_grid <- total_trips_in_origin_busstop_honeycomb %>%   group_by(grid_id) %>%   summarise(total_trips = sum(TOTAL_TRIPS))}
```

### Geovisualisation

```{r} tmap_mode("view")  map_honeycomb = tm_shape(trips_per_grid) +   tm_fill(     col = "total_trips",     palette = "Reds",     style = "cont",     title = "Number of Trips",     id = "grid_id",     showNA = FALSE,     alpha = 0.6,     popup.vars = c("total_trips"),     popup.format = list(       total_trips = list(format = "f", digits = 0))   ) +   tm_borders(col = "grey40", lwd = 0.7)  map_honeycomb}
```

### Deeper Analysis on Peak Hours

I will further analyse on the peak hours:

|     |
|-----|

The chunk code below is to ???

```{r} weekday_morning <- origin_destination_bus %>%   filter((TIME_PER_HOUR >= 6 & TIME_PER_HOUR <= 9) & DAY_TYPE == 'WEEKDAY')%>%   group_by(ORIGIN_PT_CODE) %>%   summarise(TOTAL_TRIPS=sum(TOTAL_TRIPS))  weekday_afternoon <- origin_destination_bus %>%   filter((TIME_PER_HOUR >= 17 & TIME_PER_HOUR <= 20) & DAY_TYPE == 'WEEKDAY')%>%   group_by(ORIGIN_PT_CODE) %>%   summarise(TOTAL_TRIPS=sum(TOTAL_TRIPS))  weekend_holiday_morning <- origin_destination_bus %>%   filter((TIME_PER_HOUR >= 11 & TIME_PER_HOUR <= 14) & DAY_TYPE == 'WEEKENDS/HOLIDAY')%>%   group_by(ORIGIN_PT_CODE) %>%   summarise(TOTAL_TRIPS=sum(TOTAL_TRIPS))  weekend_holiday__evening <- origin_destination_bus %>%   filter((TIME_PER_HOUR >= 16 & TIME_PER_HOUR <= 19) & DAY_TYPE == 'WEEKENDS/HOLIDAY')%>%   group_by(ORIGIN_PT_CODE) %>%   summarise(TOTAL_TRIPS=sum(TOTAL_TRIPS))}
```

### Left join

```{r} weekday_morning <- left_join(busstop, weekday_morning, by = c("BUS_STOP_N" = "ORIGIN_PT_CODE"))  weekday_afternoon <- left_join(busstop, weekday_afternoon, by = c("BUS_STOP_N" = "ORIGIN_PT_CODE"))  weekend_holiday_morning <- left_join(busstop, weekend_holiday_morning, by = c("BUS_STOP_N" = "ORIGIN_PT_CODE"))  weekend_holiday__evening <- left_join(busstop, weekend_holiday__evening, by = c("BUS_STOP_N" = "ORIGIN_PT_CODE"))}
```

### Spatially join

```{r} # Spatially join the trip data with the honeycomb grid #busstop_weekday_morning_honeycomb <- st_join(honeycomb_grid_sf,busstop_weekday_morning)  # Remove rows with NA values in the 'bus_stop_N' column #busstop_weekday_morning_honeycomb <- busstop_weekday_morning_honeycomb %>% #  filter(!is.na(BUS_STOP_N))}
```

```{r} # Group by grid ID and calculate the sum of TOTAL_TRIPS #trips_per_grid_busstop_weekday_morning <- busstop_weekday_morning_honeycomb %>% #  group_by(grid_id) %>%  # summarise(total_trips = sum(TOTAL_TRIPS))}
```

```{r} #tmap_mode("view")  #map_honeycomb = tm_shape(trips_per_grid_busstop_weekday_morning) + #  tm_fill(  #   col = "total_trips",  #   palette = "Reds",   #  style = "cont",   #  title = "Number of Trips",   #  id = "grid_id",    # showNA = FALSE,   #  alpha = 0.6,   #  popup.vars = c("total_trips"),   #  popup.format = list(   #    total_trips = list(format = "f", digits = 0))  ## ) +  # tm_borders(col = "grey40", lwd = 0.7)  #map_honeycomb}
```

```{r} # Check the class of the geometry column #class(trips_per_grid_busstop_weekday_morning$geometry)}
```

```{r}  #filtered_df <- origin_destination_bus %>%  # filter(   #  (TIME_PER_HOUR %in% peak_hours$`WeekdayMorningPeak` & DAY_TYPE == 'WEEKDAY') |    # (TIME_PER_HOUR %in% peak_hours$`WeekdayAfternoonPeak` & DAY_TYPE == 'WEEKDAY') |     #(TIME_PER_HOUR %in% peak_hours$`Weekend/holidayMorningPeak` & DAY_TYPE == 'WEEKENDS/HOLIDAY') |     #(TIME_PER_HOUR %in% peak_hours$`Weekend/holidayEveningPeak` & DAY_TYPE == 'WEEKENDS/HOLIDAY')   #)}
```
